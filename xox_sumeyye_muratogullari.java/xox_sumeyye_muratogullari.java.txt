import java.util.Scanner;

public class TicTacToe {

    // Tahta boyutu ve oyuncular için semboller için sabitler
    public static final int BOARD_SIZE = 3;
    public static final char PLAYER_X = 'X';
    public static final char PLAYER_O = 'O';
    public static final char EMPTY_SPACE = ' ';

    // Tahta, karakterlerden oluþan 2D dizi olarak temsil edilir
    private char[][] board;

    // Geçerli oyuncu (PLAYER_X veya PLAYER_O)
    private char currentPlayer;

    // Tahtayý baþlatmak ve geçerli oyuncuyu PLAYER_X olarak ayarlamak için yapýcý
    public TicTacToe() {
        board = new char[BOARD_SIZE][BOARD_SIZE];
        for (int i = 0; i < BOARD_SIZE; i++) {
            for (int j = 0; j < BOARD_SIZE; j++) {
                board[i][j] = EMPTY_SPACE;
            }
        }
        currentPlayer = PLAYER_X;
    }

    // Bir oyuncunun oyunu kazandýðýný kontrol eden yöntem
    public boolean isWon() {
        // Kazanç için satýrlar ve sütunlarý kontrol et
        for (int i = 0; i < BOARD_SIZE; i++) {
            if (board[i][0] == board[i][1] && board[i][1] == board[i][2] && board[i][0] != EMPTY_SPACE) {
                return true;
            }
            if (board[0][i] == board[1][i] && board[1][i] == board[2][i] && board[0][i] != EMPTY_SPACE) {
                return true;
            }
        }

        // Kazanç için çaprazlarý kontrol et
        if (board[0][0] == board[1][1] && board[1][1] == board[2][2] && board[0][0] != EMPTY_SPACE) {
            return true;
        }
        if (board[0][2] == board[1][1] && board[1][1] == board[2][0] && board[0][2] != EMPTY_SPACE) {
            return true;
        }

        return false;
    }

        // Oyunun berabere olduðunu kontrol eden yöntem
	    public boolean isDraw() {
        // Oyun kazanýlmýþsa, berabere olamaz
        if (isWon()) {
            return false;
        }

        // En az bir boþluk varsa, oyun berabere deðildir
        for (int i = 0; i < BOARD_SIZE; i++) {
            for (int j = 0; j < BOARD_SIZE; j++) {
                if (board[i][j] == EMPTY_SPACE) {
                    return false;
                }
            }
        }

        // Bu noktaya ulaþýldýðýnda oyun berabere olamaz
        return true;
    }
        
        public void makeMove(int row, int column) {
    if (board[row][column] == EMPTY_SPACE) {
        board[row][column] = currentPlayer;
        if (currentPlayer == PLAYER_X) {
            currentPlayer = PLAYER_O;
        } else {
            currentPlayer = PLAYER_X;
        }
    } else {
        System.out.println("Bu alan zaten dolu. Lütfen tekrar deneyin.");
    }
}

// Tahtayý konsola yazdýran yöntem
public void printBoard() {
    System.out.println("  0 1 2");
    for (int i = 0; i < BOARD_SIZE; i++) {
        System.out.print(i + " ");
        for (int j = 0; j < BOARD_SIZE; j++) {
            System.out.print(board[i][j] + " ");
        }
        System.out.println();
    }
}

public static void main(String[] args) {
    TicTacToe game = new TicTacToe();
    Scanner scanner = new Scanner(System.in);